package java_testcases.junit;

import static org.junit.Assert.*;
import org.junit.Test;
import java_programs.LONGEST_COMMON_SUBSEQUENCE;
import com.google.gson.JsonParser;

public class LONGEST_COMMON_SUBSEQUENCE_TEST {
  /**
   * Junit test case for LONGEST_COMMON_SUBSEQUENCE generated by tests generator.
   */
  @Test 
  public void longest_common_subsequence_test1() {
    try {
      Object actual = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((java.lang.String)"headache",(java.lang.String)"pentadactyl");
      assertEquals("eadac",actual.toString() );
    }
    catch(IllegalArgumentException e) {
      throw new IllegalArgumentException("Arguments are illegal!") ;
    }
  }

  @Test 
  public void longest_common_subsequence_test2() {
    try {
      Object actual = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((java.lang.String)"daenarys",(java.lang.String)"targaryen");
      assertEquals("aary",actual.toString() );
    }
    catch(IllegalArgumentException e) {
      throw new IllegalArgumentException("Arguments are illegal!") ;
    }
  }

  @Test 
  public void longest_common_subsequence_test3() {
    try {
      Object actual = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((java.lang.String)"XMJYAUZ",(java.lang.String)"MZJAWXU");
      assertEquals("MJAU",actual.toString() );
    }
    catch(IllegalArgumentException e) {
      throw new IllegalArgumentException("Arguments are illegal!") ;
    }
  }

  @Test
  public void longest_common_subsequence_test4() {
    try {
      Object actual = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((java.lang.String)"thisisatest",(java.lang.String)"testing123testing");
      assertEquals("tsitest",actual.toString() );
    }
    catch(IllegalArgumentException e) {
      throw new IllegalArgumentException("Arguments are illegal!") ;
    }
  }

  @Test 
  public void longest_common_subsequence_test5() {
    try {
      Object actual = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((java.lang.String)"1234",(java.lang.String)"1224533324");
      assertEquals("1234",actual.toString() );
    }
    catch(IllegalArgumentException e) {
      throw new IllegalArgumentException("Arguments are illegal!") ;
    }
  }

  @Test 
  public void longest_common_subsequence_test6() {
    try {
      Object actual = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((java.lang.String)"abcbdab",(java.lang.String)"bdcaba");
      assertEquals("bcba",actual.toString() );
    }
    catch(IllegalArgumentException e) {
      throw new IllegalArgumentException("Arguments are illegal!") ;
    }
  }

  @Test 
  public void longest_common_subsequence_test7() {
    try {
      Object actual = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((java.lang.String)"TATAGC",(java.lang.String)"TAGCAG");
      assertEquals("TAAG",actual.toString() );
    }
    catch(IllegalArgumentException e) {
      throw new IllegalArgumentException("Arguments are illegal!") ;
    }
  }

  @Test 
  public void longest_common_subsequence_test8() {
    try {
      Object actual = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((java.lang.String)"ABCBDAB",(java.lang.String)"BDCABA");
      assertEquals("BCBA",actual.toString() );
    }
    catch(IllegalArgumentException e) {
      throw new IllegalArgumentException("Arguments are illegal!") ;
    }
  }

  @Test 
  public void longest_common_subsequence_test9() {
    try {
      Object actual = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((java.lang.String)"ABCD",(java.lang.String)"XBCYDQ");
      assertEquals("BCD",actual.toString() );
    }
    catch(IllegalArgumentException e) {
      throw new IllegalArgumentException("Arguments are illegal!") ;
    }
  }

  @Test 
  public void longest_common_subsequence_test10() {
    try {
      Object actual = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((java.lang.String)"acbdegcedbg",(java.lang.String)"begcfeubk");
      assertEquals("begceb",actual.toString() );
    }
    catch(IllegalArgumentException e) {
      throw new IllegalArgumentException("Arguments are illegal!") ;
    }
  }

}
